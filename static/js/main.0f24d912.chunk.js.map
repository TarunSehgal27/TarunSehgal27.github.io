{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","mode","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","align","Alert","height","alert","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0f24d912.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import {Link} from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/*<Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>*/}\r\n          <a className=\"nav-link\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/*<li className=\"nav-item\">\r\n          <Link className=\"nav-link\" aria-current=\"page\" to=\"/about\">{props.aboutText}</Link>\r\n    </li>*/}\r\n      </ul>\r\n      {/*<form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n    </form>*/}\r\n      <div className=\"form-check form-switch text-light\">\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\nNavbar.propTypes={title: PropTypes.string.isRequired,\r\n                    aboutText: PropTypes.string.isRequired}\r\n\r\nNavbar.defaultProps={title:\"Set title here\", aboutText: \"Set about here\"}","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n       // console.log(\"UpperCase Button clicked\" + text)\r\n        let newText=text.toUpperCase()\r\n        setText(newText)\r\n        props.showAlert(\"Converted to UpperCase\",\"Success\")\r\n    }\r\n    const handleLoClick=()=>{\r\n        // console.log(\"UpperCase Button clicked\" + text)\r\n         let newText=text.toLowerCase()\r\n         setText(newText)\r\n         props.showAlert(\"Converted to LowerCase\",\"Success\")\r\n    }\r\n    const handleclearClick=()=>{\r\n        // console.log(\"UpperCase Button clicked\" + text)\r\n         let newText=''\r\n         setText(newText)\r\n         props.showAlert(\"Text cleared\",\"Success\")\r\n    }\r\n    const handleCopy=()=>{\r\n        navigator.clipboard.writeText(text);\r\n        //console.log(newtext);\r\n        props.showAlert(\"Text copied\",\"Success\");\r\n    }\r\n    const handleExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed\",\"Success\")\r\n    }\r\n    const handleOnChange=(event)=>{\r\n        //console.log(\"OnChange\")\r\n        setText(event.target.value)\r\n    }\r\n    const[text,setText]=useState('');\r\n    //setText(\"new text\"); //Correct way to change state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1 className='mb-3'>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n        <textarea className=\"form-control\"  value={text} onChange={handleOnChange} \r\n        style={{backgroundColor: props.mode==='dark'?'#13466e':'white',color: props.mode==='dark'?'white':'black'}} id=\"mybox\" rows=\"10\"></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>To UpperCase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>To LowerCase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleclearClick}>Clear Text</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        \r\n\r\n        </div>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n        </div>\r\n        <div className=\"accordion-body\" align=\"center\">\r\n                This utility has been created by Tarun Sehgal. I'm a 3rd year IT student. \r\n            </div>\r\n        </>\r\n    ) \r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n  /*const capitalize=(word)=>{\r\n    const lower = word.toLowerCase()\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }*/\r\n    return (\r\n      <div style={{height:'50px'}}>\r\n        {props.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n        <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n        {/*<button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>*/}\r\n      </div>}\r\n      </div>\r\n    )\r\n}\r\n","//import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n//import About from './components/About'\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n{/*import{\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";*/}\n\n//let name=\"Tarun\"\nfunction App() {\n  const [mode, setMode]= useState('light');\n  const [alert,setAlert]= useState(null)\n\n  const showAlert=(message, type)=>{\n        setAlert({\n          msg : message,\n          type : type\n        })\n        setTimeout(()=>{\n          setAlert(null);\n        },2000)\n  }\n  const toggleMode=()=>{\n    if(mode ==='light'){\n    setMode('dark')\n    document.body.style.backgroundColor = \"#042743\";\n    showAlert(\"Dark mode has been enabled\", \"Success\");\n    //document.title=\"TextUtils Dark Mode\"\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\",\"Success\");\n     // document.title=\"TextUtils Light Mode\"\n    }\n  }\n  return (\n    <>\n    {/*<Router>*/}\n   <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>\n   <Alert alert={alert}/>\n   <div className=\"container my-3\">\n   {/*<Switch>*/}\n          {/*<Route exact path=\"/about\">\n            <About mode={mode} />\n          </Route>*/}\n          {/*<Route exact path=\"/\">*/}\n          <TextForm showAlert={showAlert} heading=\"Try TextUtils - Word counter,Character counter,Remove extra spaces\" mode={mode}/>\n          {/*</Route>*/}\n        {/*</Switch>*/}\n   </div>\n   {/*</Router>*/}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}